@startuml
'https://plantuml.com/object-diagram

class LogLevel{
   +enum Level
   {static}+ToString()
   {static}+FromString()
}

LogLevel o-- LogEvent
class LogEvent{
    - m_level LogLevel::enum
    - m_ss stringstream
    - m_file const char*
    - m_line int32_t
    - m_elapse int64_t
    - m_threadId uint32_t
    - m_filberId uint64_t
    - m_time time_t
    - m_threadName string
    - m_loggername string
    --
    + ptr shared_ptr<LogEvent>
    --
    + LogEvent()
    + getLevel() LogLevel::Level
    + getContent() string
    + getFile() string
    + getLine() int32_t
    + getElapse() int64_t
    + getThreadId() uint32_t
    + getFiberId() uint64_t
    + getTime() time_t
    + getThreadName() string+ getSS() stringstream
    + printf() void
    + vprintf() void
}

abstract class FormaItem{
    + ptr shared_ptr<FormaItem>
    --
    + ~FormaItem() virtual void
    + format() virtual void
}

FormaItem <|-- LogFormatter
class LogFormatter{
    - m_pattern string
    - m_items vector<FormaItem::ptr>
    - m_error bool
    --
    + ptr shared_ptr<LogFormatter>
    --
    + LogFormatter()
    + init() void
    + isError() bool
    + format() string
    + format() ostream
    + getPattern() string
    --
    class FormaItem
}

LogFormatter o-- LogAppender
abstract class LogAppender{
    + ptr shared_ptr<LogAppender>
    + SpinLock MutexType
    --
    # m_mutex MutexType
    # m_formatter LogFormatter::ptr
    # m_defaultFormater LogFormatter::ptr
    --
    + LogAppender()
    + ~LogAppender() virtual
    + setFormatter() void
    + getFormatter() LogFormatter::ptr
    + log() virtual void
    + toYamlString() virtual void
}

LogAppender <|-- StdoutLogAppender
class StdoutLogAppender{
    + ptr shared_ptr<StdoutLogAppender>
    --
    + StdoutLogAppender()
    + log() void
    + toYamlString() string
}

LogAppender <|--FileLogAppender
class FileLogAppender{
    + ptr shared_ptr<FileLogAppender>
    --
    - m_filename string
    - m_filestream ofstream
    - m_lasttime uint64_t
    - m_reopenerror bool
    --
    + FileLogAppender()
    + log() void
    + reopen() bool
    + toYamlString() string
}


LogLevel o-- Logger
LogAppender o-- Logger
class Logger{
    + ptr shared_ptr<Logger>
    + SpinLock MutexType
    --
    - m_mutex MutexType
    - m_name string
    - m_level LogLevel::Level
    - m_appenders list<LogAppender>
    - m_createTime uint64_t
    --
    + Logger()
    + getName() string
    + getCreateTime() uint64_t
    + setLevel() void
    + getLevel() LogLevel::Level
    + addAppender() void
    + delAppender() void
    + clearAppenders() void
    + log() void
}

Logger <-- LogEventWrap
LogEvent <-- LogEventWrap
class LogEventWrap{
    - m_logger Logger::ptr
    - m_event LogEvent::ptr
    --
    + LogEventWrap()
    + ~LogEventWrap()
    + getLogEvent() LogEvent::ptr
}

Logger *-- LoggerManger
class LoggerManger{
    + SpinLock MutexType
    --
    - m_mutex MutexType
    - m_loggers map<string,Logger::ptr>
    - m_root Logger::ptr
    --
    + LoggerManger()
    + init() void
    + getLogger() Logger::ptr
    + getRoot() Logger::ptr
    + toYamlString() string
}
@enduml
TODO:内部类表示
